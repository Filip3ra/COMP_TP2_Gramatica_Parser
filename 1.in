fn fn
main main
( (
) )
{ {
if if
ID ID
( (
NUM NUM
) )
{ {
let let
ID ID
= =
ID ID
; ;
} }
let let
ID ID
; ;
let let
ID ID
= =
ID ID
; ;
let let
ID ID
: :
[ [
int int
; ;
NUM NUM
] ]
= =
[ [
NUM NUM
, ,
NUM NUM
] ]
; ;
} }
fn fn
ID ID
( (
ID ID
: :
int int
) )
{ {
while
( (
! !
( (
ID ID
+ +
ID ID
) )
|| ||
( (
ID ID
== ==
ID ID
) )
) )
{ {
} }
return return
ID ID
+ +
ID ID
; ;
} }
fn fn
ID ID
( (
ID ID
: :
i8 i8
, ,
ID ID
: :
f32 f32
) )
{ {
let let
ID ID
; ;
ID ID
( (
NUM NUM
) )
; ;
ID ID
( (
ID ID
) )
; ;
ID ID
[ [
NUM NUM
] ]
} }
fn fn
ID ID
( (
ID ID
: :
i8 i8
, ,
ID ID
: :
f32 f32
) )
{ {
ID ID
( (
ID ID
+ +
ID ID
, ,
NUM NUM
- -
NUM NUM
) )
; ;
if if
( (
! !
NUM NUM
) )
{ {
} }
else else
if if
( (
ID ID
> >
ID ID
&& &&
NUM NUM
) )
{ {
} }
else else
{ {
} }
let let
ID ID
: :
[ [
int int
; ;
NUM NUM
] ]
= =
[ [
NUM NUM
, ,
NUM NUM
, ,
NUM NUM
, ,
NUM NUM
] ]
; ;
} }