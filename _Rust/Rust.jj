/*************************************
 * Autor: Filipi Maciel              *
  ************************************/


PARSER_BEGIN(Rust)
import java.io.*;
class Rust 
{
	public static void main( String[] args )throws ParseException, Exception
	{
		Rust lex = new Rust(new FileInputStream(args[0]));
		lex.AnaliseLexica();		
	}
}
PARSER_END(Rust)



/***********************************************************
 * PALAVRAS RESERVADAS                                     *
 * Rust divide as palavras reservadas em três categorias:  *
 * 1) Strict		2) Reserved 	3) Weak                *
 ***********************************************************/


 /*******************************
 * PALAVRAS RESERVADAS: STRICT  *
 ********************************/
TOKEN:
{
	  <KW_AS: "as">
	| <KW_BREAK: "break">
	| <KW_CONST: "const">
	| <KW_CONTINUE: "continue">
	| <KW_CRATE: "crate">
	| <KW_ELSE: "else">
	| <KW_ENUM: "enum">
	| <KW_EXTERN: "extern">
	| <KW_FALSE: "false">
	| <KW_FN: "fn">
	| <KW_FOR: "for">
	| <KW_IF: "if">
	| <KW_IMPL: "impl">
	| <KW_IN: "in">
	| <KW_LET: "let">
	| <KW_LOOP: "loop">
	| <KW_MATCH: "match">
	| <KW_MOD: "mod">
	| <KW_MOVE: "move">
	| <KW_MUT: "mut">
	| <KW_PUB: "pub">
	| <KW_REF: "ref">
	| <KW_RETURN: "return">
	| <KW_SELFVALUE: "self">
	| <KW_SELFTYPE: "Self">
	| <KW_STATIC: "static">
	| <KW_STRUCT: "struct">
	| <KW_SUPER: "super">
	| <KW_TRAIT: "trait">
	| <KW_TRUE: "true">
	| <KW_TYPE: "type">
	| <KW_UNSAFE: "unsafe">
	| <KW_USE: "use">
	| <KW_WHERE: "where">
	| <KW_WHILE: "while">
	| <KW_ASYNC : "async">
	| <KW_AWAIT : "await">
	| <KW_DYN : "dyn">
}


 /**********************************
 * PALAVRAS RESERVADAS: RESERVERD  *
 ***********************************/
TOKEN:
{
	  <KW_ABSTRACT : "abstract">
	| <KW_BECOME : "become">
	| <KW_BOX : "box">
	| <KW_DO : "do">
	| <KW_FINAL : "final">
	| <KW_MACRO : "macro">
	| <KW_OVERRIDE : "override">
	| <KW_PRIV : "priv">
	| <KW_TYPEOF : "typeof">
	| <KW_UNSIZED : "unsized">
	| <KW_VIRTUAL : "virtual">
	| <KW_YIELD : "yield">
	| <KW_TRY : "try">
	| <BOOLEANO : "bool">
}


/******************************
* PALAVRAS RESERVADAS: WEAK  *
 ******************************/
TOKEN:
{
	  <KW_UNION : "union">
	| <KW_STATICLIFETIME : "\'static">
}


/************
 *  MACROS  *
 ************/
TOKEN:
{
	  <MACRO: ["a"-"z","A"-"Z","0"-"9","_"](["a"-"z","A"-"Z","0"-"9","_"])*<EXCLAMACAO>>	
}



/******************
 * DELIMITADORES  *
 ******************/
TOKEN:
{
      <APAREN: "(" >
	| <FPAREN: ")" >
	| <ACHAVES: "{" >
	| <FCHAVES: "}" >
	| <ACOLCHETE: "[" >
	| <FCOLCHETE: "]" >
}


/***************
 * PONTUAÇÕES  *
 ***************/
TOKEN:
{
	  <MAIS: "+">
	| <MENOS: "-">
	| <ESTRELA: "*">
	| <BARRAINVERTIDA: "/">
	| <BARRABARRA: "//">
	| <PORCENTO: "%">
	| <CHAPEU: "^">
	| <EXCLAMACAO: "!">
	| <ECOMERCIAL: "&">
	| <OU: "|">
	| <ANDAND: "&&">
	| <OUOU: "||">
	| <MENORMENOR: "<<">
	| <MAIORMAIOR: ">>">
	| <MAISIGUAL: "+=">
	| <MENOSIGUAL: "-=">
	| <ESTRELAIGUAL: "*=">
	| <CONTRABARRAIGUAL: "/=">
	| <PORCENTOIGUAL: "%=">
	| <CHAPEUIGUAL: "^=">
	| <ECOMERCIALIGUAL: "&=">
	| <OUIGUAL: "|=">
	| <MENORMENORIGUAL: "<<=">
	| <MAIORMAIORIGUAL: ">>=">
	| <IGUAL: "=">
	| <IGUALIGUAL: "==">
	| <DIFERENTE: "!=">
	| <MAIORQUE: ">">
	| <MENORQUE: "<">
	| <MAIOROUIGUAL: ">=">
	| <MENOROUIGUAL: "<=">
	| <ARROBA: "@">
	| <UNDERLINE: "_">
	| <PONTO: "." >
	| <PONTOPONTO: ".." > 
	| <PONTOPONTOPONTO: "..." >
	| <PONTOPONTOIGUAL: "..=" >
	| <VIRGULA: "," > 
	| <PONTOVIRGULA: ";" >
	| <DOISPONTOS: ":" >
	| <DUPLODOISPONTOS: "::" >
	| <SETA: "->">
	| <SETAGORDA: "=>">
	| <QUADRADO: "#">
	| <CIFRAO: "$">
	| <ASPASDUPLAS: "\"">
	| <ASPASSIMPLES: "\'">
	| <INTERROGACAO: "?">
}



/**********************************************************
 * IDENTIFICADORES, NUMEROS, FLOAT, CADEIA DE CARACTERES  *
 **********************************************************/
TOKEN:
{
	  <NUM : (["0"-"9"])+>
	| <FLOAT : (["0"-"9"])+["."](["0"-"9"])+>
	| <CADEIA : <ASPASDUPLAS>
	  (["a"-"z","A"-"Z","0"-"9"," ",":",";",".","!","=","^","@","#","$","%","&","*",")","(","{","}",">","<","[","]"])*<ASPASDUPLAS>>
	| <CARACTERE : "'"["a"-"z","A"-"Z","0"-"9"]"'" >
	| <ID : (["a"-"z","A"-"Z"]) (["a"-"z","A"-"Z","0"-"9","_"])*>
	
}



/**********************
 * ESPACOS EM BRANCO  *
 **********************/
SKIP : 
{ 
	" " | "\n" | "\r" | "\t" 
}


void AnaliseLexica() :
{Token t;}
{
	(
		  <KW_AS>			{System.out.println("PALAVRAS RESERVADAS STRICT: as");}
		| <KW_BREAK>		{System.out.println("PALAVRAS RESERVADAS STRICT: break");}
		| <KW_CONST>		{System.out.println("PALAVRAS RESERVADAS STRICT: const");}
		| <KW_CONTINUE>		{System.out.println("PALAVRAS RESERVADAS STRICT: continue");}
		| <KW_CRATE>		{System.out.println("PALAVRAS RESERVADAS STRICT: crate");}
		| <KW_ELSE>			{System.out.println("KW_ELSE else");}
		| <KW_ENUM> 		{System.out.println("PALAVRAS RESERVADAS STRICT: enum");}
		| <KW_EXTERN> 		{System.out.println("PALAVRAS RESERVADAS STRICT: extern");}
		| <KW_FALSE>		{System.out.println("PALAVRAS RESERVADAS STRICT: false");}
		| <KW_FN> 			{System.out.println("fn fn");}
		| <KW_FOR>			{System.out.println("PALAVRAS RESERVADAS STRICT: for");}
		| <KW_IF>			{System.out.println("if if");}
		| <KW_IMPL>			{System.out.println("PALAVRAS RESERVADAS STRICT: impl");}
		| <KW_IN>			{System.out.println("PALAVRAS RESERVADAS STRICT: in");}
		| <KW_LET>			{System.out.println("PALAVRAS RESERVADAS STRICT: let");}
		| <KW_LOOP>			{System.out.println("PALAVRAS RESERVADAS STRICT: loop");}
		| <KW_MATCH>		{System.out.println("PALAVRAS RESERVADAS STRICT: match");}
		| <KW_MOD>			{System.out.println("PALAVRAS RESERVADAS STRICT: mod");}
		| <KW_MOVE>			{System.out.println("PALAVRAS RESERVADAS STRICT: move");}
		| <KW_MUT>			{System.out.println("PALAVRAS RESERVADAS STRICT: mut");}
		| <KW_PUB>			{System.out.println("PALAVRAS RESERVADAS STRICT: pub");}
		| <KW_REF>			{System.out.println("PALAVRAS RESERVADAS STRICT: ref");}
		| <KW_RETURN>		{System.out.println("PALAVRAS RESERVADAS STRICT: return");}
		| <KW_SELFVALUE>	{System.out.println("PALAVRAS RESERVADAS STRICT: self");}
		| <KW_SELFTYPE>		{System.out.println("PALAVRAS RESERVADAS STRICT: Self");}
		| <KW_STATIC>		{System.out.println("PALAVRAS RESERVADAS STRICT: static");}
		| <KW_STRUCT>		{System.out.println("PALAVRAS RESERVADAS STRICT: struct");}
		| <KW_SUPER>		{System.out.println("PALAVRAS RESERVADAS STRICT: super");}
		| <KW_TRAIT>		{System.out.println("PALAVRAS RESERVADAS STRICT: trait");}
		| <KW_TRUE>			{System.out.println("PALAVRAS RESERVADAS STRICT: true");}
		| <KW_TYPE>			{System.out.println("PALAVRAS RESERVADAS STRICT: type");}
		| <KW_UNSAFE>		{System.out.println("PALAVRAS RESERVADAS STRICT: unsafe");}
		| <KW_USE>			{System.out.println("PALAVRAS RESERVADAS STRICT: use");}
		| <KW_WHERE>		{System.out.println("PALAVRAS RESERVADAS STRICT: where");}
		| <KW_WHILE>		{System.out.println("PALAVRAS RESERVADAS STRICT: while");}
		| <KW_ASYNC>		{System.out.println("PALAVRAS RESERVADAS STRICT: async");}
		| <KW_AWAIT>		{System.out.println("PALAVRAS RESERVADAS STRICT: await");}
		| <KW_DYN>			{System.out.println("PALAVRAS RESERVADAS STRICT: dyn");}

		| <KW_ABSTRACT>		{System.out.println("PALAVRAS RESERVADAS RESERVED: abstract");}
		| <KW_BECOME>		{System.out.println("PALAVRAS RESERVADAS RESERVED: become");}
		| <KW_BOX>			{System.out.println("PALAVRAS RESERVADAS RESERVED: box");}
		| <KW_DO>			{System.out.println("PALAVRAS RESERVADAS RESERVED: do");}
		| <KW_FINAL>		{System.out.println("PALAVRAS RESERVADAS RESERVED: final");}
		| <KW_MACRO>		{System.out.println("PALAVRAS RESERVADAS RESERVED: macro");}
		| <KW_OVERRIDE>		{System.out.println("PALAVRAS RESERVADAS RESERVED: override");}
		| <KW_PRIV>			{System.out.println("PALAVRAS RESERVADAS RESERVED: priv");}
		| <KW_TYPEOF>		{System.out.println("PALAVRAS RESERVADAS RESERVED: typeof");}
		| <KW_UNSIZED>		{System.out.println("PALAVRAS RESERVADAS RESERVED: unsized");}
		| <KW_VIRTUAL>		{System.out.println("PALAVRAS RESERVADAS RESERVED: virtual");}
		| <KW_YIELD>		{System.out.println("PALAVRAS RESERVADAS RESERVED: yield");}
		| <KW_TRY>			{System.out.println("PALAVRAS RESERVADAS RESERVED: try");}

		| <KW_UNION>		{System.out.println("PALAVRAS RESERVADAS WEAK: union");}
		| <KW_STATICLIFETIME>{System.out.println("PALAVRAS RESERVADAS WEAK: 'static");}

		| <MAIS>			{System.out.println("MAIS +");}
		| <MENOS>			{System.out.println("MENOS -");}
		| <ESTRELA>			{System.out.println("ESTRELA *");}
		| <BARRAINVERTIDA>	{System.out.println("BARRAINVERTIDA /");}
		| <PORCENTO>		{System.out.println("PORCENTO %");}
		| <CHAPEU>			{System.out.println("CHAPEU ^");}
		| <EXCLAMACAO>		{System.out.println("EXCLAMACAO !");}
		| <ECOMERCIAL>		{System.out.println("ECOMERCIAL &");}
		| <OU>				{System.out.println("OU |");}
		| <ANDAND>			{System.out.println("ANDAND &&");}
		| <OUOU>			{System.out.println("OUOU ||");}
		| <MENORMENOR>		{System.out.println("PONTUACAO: <<");}
		| <MAIORMAIOR>		{System.out.println("PONTUACAO: >>");}
		| <MAISIGUAL>		{System.out.println("PONTUACAO: +=");}
		| <MENOSIGUAL>		{System.out.println("PONTUACAO: -=");}
		| <ESTRELAIGUAL>	{System.out.println("PONTUACAO: *=");}
		| <CONTRABARRAIGUAL>{System.out.println("PONTUACAO: /=");}
		| <PORCENTOIGUAL>	{System.out.println("PONTUACAO: %=");}
		| <CHAPEUIGUAL>		{System.out.println("PONTUACAO: ^=");}
		| <ECOMERCIALIGUAL>	{System.out.println("PONTUACAO: &=");}
		| <OUIGUAL>			{System.out.println("PONTUACAO: |=");}
		| <MENORMENORIGUAL>	{System.out.println("PONTUACAO: <<=");}
		| <MAIORMAIORIGUAL>	{System.out.println("PONTUACAO: >>=");}
		| <IGUAL>			{System.out.println("IGUAL =");}
		| <IGUALIGUAL>		{System.out.println("PONTUACAO: ==");}
		| <DIFERENTE>		{System.out.println("PONTUACAO: !=");}
		| <MAIORQUE>		{System.out.println("PONTUACAO: >");}
		| <MENORQUE>		{System.out.println("PONTUACAO: <");}
		| <MAIOROUIGUAL>	{System.out.println("PONTUACAO: >=");}
		| <MENOROUIGUAL>	{System.out.println("PONTUACAO: <=");}
		| <ARROBA>			{System.out.println("PONTUACAO: @");}
		| <UNDERLINE>		{System.out.println("PONTUACAO: _");}
		| <PONTO>			{System.out.println("PONTUACAO: .");}
		| <PONTOPONTO>		{System.out.println("PONTUACAO: ..");}
		| <PONTOPONTOPONTO>	{System.out.println("PONTUACAO: ...");}
		| <PONTOPONTOIGUAL>	{System.out.println("PONTUACAO: ..=");}
		| <VIRGULA>			{System.out.println("PONTUACAO: ,");}
		| <PONTOVIRGULA>	{System.out.println("PONTUACAO: ;");}
		| <DOISPONTOS>		{System.out.println("PONTUACAO: :");}
		| <DUPLODOISPONTOS>	{System.out.println("PONTUACAO: ::");}
		| <SETA>			{System.out.println("PONTUACAO: ->");}
		| <SETAGORDA>		{System.out.println("PONTUACAO: =>");}
		| <QUADRADO>		{System.out.println("PONTUACAO: #");}
		| <CIFRAO>			{System.out.println("CIFRAO $");}
		| <ASPASDUPLAS>		{System.out.println("PONTUACAO: \"");}
		| <ASPASSIMPLES>	{System.out.println("PONTUACAO: \'");}
		| <INTERROGACAO>	{System.out.println("PONTUACAO: ?");}

		|	<ACHAVES>		{System.out.println("ACHAVES {");}
		|	<FCHAVES>		{System.out.println("FCHAVES }");}
		|	<APAREN> 		{System.out.println("APAREN (");}
		|	<FPAREN> 		{System.out.println("FPAREN )");}
		|	<ACOLCHETE>		{System.out.println("ACOLCHETE [");}
		|	<FCOLCHETE>		{System.out.println("FCOLCHETE ]");}

		| <BOOLEANO>		{System.out.println("BOLEANO: bool");}
		| t=<NUM>			{System.out.println("NUM " + t.image);}
		| t=<FLOAT>			{System.out.println("FLOAT " + t.image);}
		| t=<CADEIA> 	    {System.out.println("CADEIA " + t.image);}
		| t=<MACRO> 	    {System.out.println("MACRO: " + t.image);}
		| t=<CARACTERE>     {System.out.println("CARACTERE " + t.image);}
		| t=<ID>			{System.out.println("ID " + t.image);}
		
	)*
}
