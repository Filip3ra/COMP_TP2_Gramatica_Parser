/* Generated By:JavaCC: Do not edit this line. RustConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RustConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int KW_AS = 1;
  /** RegularExpression Id. */
  int KW_BREAK = 2;
  /** RegularExpression Id. */
  int KW_CONST = 3;
  /** RegularExpression Id. */
  int KW_CONTINUE = 4;
  /** RegularExpression Id. */
  int KW_CRATE = 5;
  /** RegularExpression Id. */
  int KW_ELSE = 6;
  /** RegularExpression Id. */
  int KW_ENUM = 7;
  /** RegularExpression Id. */
  int KW_EXTERN = 8;
  /** RegularExpression Id. */
  int KW_FALSE = 9;
  /** RegularExpression Id. */
  int KW_FN = 10;
  /** RegularExpression Id. */
  int KW_FOR = 11;
  /** RegularExpression Id. */
  int KW_IF = 12;
  /** RegularExpression Id. */
  int KW_IMPL = 13;
  /** RegularExpression Id. */
  int KW_IN = 14;
  /** RegularExpression Id. */
  int KW_LET = 15;
  /** RegularExpression Id. */
  int KW_LOOP = 16;
  /** RegularExpression Id. */
  int KW_MATCH = 17;
  /** RegularExpression Id. */
  int KW_MOD = 18;
  /** RegularExpression Id. */
  int KW_MOVE = 19;
  /** RegularExpression Id. */
  int KW_MUT = 20;
  /** RegularExpression Id. */
  int KW_PUB = 21;
  /** RegularExpression Id. */
  int KW_REF = 22;
  /** RegularExpression Id. */
  int KW_RETURN = 23;
  /** RegularExpression Id. */
  int KW_SELFVALUE = 24;
  /** RegularExpression Id. */
  int KW_SELFTYPE = 25;
  /** RegularExpression Id. */
  int KW_STATIC = 26;
  /** RegularExpression Id. */
  int KW_STRUCT = 27;
  /** RegularExpression Id. */
  int KW_SUPER = 28;
  /** RegularExpression Id. */
  int KW_TRAIT = 29;
  /** RegularExpression Id. */
  int KW_TRUE = 30;
  /** RegularExpression Id. */
  int KW_TYPE = 31;
  /** RegularExpression Id. */
  int KW_UNSAFE = 32;
  /** RegularExpression Id. */
  int KW_USE = 33;
  /** RegularExpression Id. */
  int KW_WHERE = 34;
  /** RegularExpression Id. */
  int KW_WHILE = 35;
  /** RegularExpression Id. */
  int KW_ASYNC = 36;
  /** RegularExpression Id. */
  int KW_AWAIT = 37;
  /** RegularExpression Id. */
  int KW_DYN = 38;
  /** RegularExpression Id. */
  int KW_ABSTRACT = 39;
  /** RegularExpression Id. */
  int KW_BECOME = 40;
  /** RegularExpression Id. */
  int KW_BOX = 41;
  /** RegularExpression Id. */
  int KW_DO = 42;
  /** RegularExpression Id. */
  int KW_FINAL = 43;
  /** RegularExpression Id. */
  int KW_MACRO = 44;
  /** RegularExpression Id. */
  int KW_OVERRIDE = 45;
  /** RegularExpression Id. */
  int KW_PRIV = 46;
  /** RegularExpression Id. */
  int KW_TYPEOF = 47;
  /** RegularExpression Id. */
  int KW_UNSIZED = 48;
  /** RegularExpression Id. */
  int KW_VIRTUAL = 49;
  /** RegularExpression Id. */
  int KW_YIELD = 50;
  /** RegularExpression Id. */
  int KW_TRY = 51;
  /** RegularExpression Id. */
  int BOOLEANO = 52;
  /** RegularExpression Id. */
  int KW_UNION = 53;
  /** RegularExpression Id. */
  int KW_STATICLIFETIME = 54;
  /** RegularExpression Id. */
  int MACRO = 55;
  /** RegularExpression Id. */
  int APAREN = 56;
  /** RegularExpression Id. */
  int FPAREN = 57;
  /** RegularExpression Id. */
  int ACHAVES = 58;
  /** RegularExpression Id. */
  int FCHAVES = 59;
  /** RegularExpression Id. */
  int ACOLCHETE = 60;
  /** RegularExpression Id. */
  int FCOLCHETE = 61;
  /** RegularExpression Id. */
  int MAIS = 62;
  /** RegularExpression Id. */
  int MENOS = 63;
  /** RegularExpression Id. */
  int ESTRELA = 64;
  /** RegularExpression Id. */
  int BARRAINVERTIDA = 65;
  /** RegularExpression Id. */
  int BARRABARRA = 66;
  /** RegularExpression Id. */
  int PORCENTO = 67;
  /** RegularExpression Id. */
  int CHAPEU = 68;
  /** RegularExpression Id. */
  int EXCLAMACAO = 69;
  /** RegularExpression Id. */
  int ECOMERCIAL = 70;
  /** RegularExpression Id. */
  int OU = 71;
  /** RegularExpression Id. */
  int ANDAND = 72;
  /** RegularExpression Id. */
  int OUOU = 73;
  /** RegularExpression Id. */
  int MENORMENOR = 74;
  /** RegularExpression Id. */
  int MAIORMAIOR = 75;
  /** RegularExpression Id. */
  int MAISIGUAL = 76;
  /** RegularExpression Id. */
  int MENOSIGUAL = 77;
  /** RegularExpression Id. */
  int ESTRELAIGUAL = 78;
  /** RegularExpression Id. */
  int CONTRABARRAIGUAL = 79;
  /** RegularExpression Id. */
  int PORCENTOIGUAL = 80;
  /** RegularExpression Id. */
  int CHAPEUIGUAL = 81;
  /** RegularExpression Id. */
  int ECOMERCIALIGUAL = 82;
  /** RegularExpression Id. */
  int OUIGUAL = 83;
  /** RegularExpression Id. */
  int MENORMENORIGUAL = 84;
  /** RegularExpression Id. */
  int MAIORMAIORIGUAL = 85;
  /** RegularExpression Id. */
  int IGUAL = 86;
  /** RegularExpression Id. */
  int IGUALIGUAL = 87;
  /** RegularExpression Id. */
  int DIFERENTE = 88;
  /** RegularExpression Id. */
  int MAIORQUE = 89;
  /** RegularExpression Id. */
  int MENORQUE = 90;
  /** RegularExpression Id. */
  int MAIOROUIGUAL = 91;
  /** RegularExpression Id. */
  int MENOROUIGUAL = 92;
  /** RegularExpression Id. */
  int ARROBA = 93;
  /** RegularExpression Id. */
  int UNDERLINE = 94;
  /** RegularExpression Id. */
  int PONTO = 95;
  /** RegularExpression Id. */
  int PONTOPONTO = 96;
  /** RegularExpression Id. */
  int PONTOPONTOPONTO = 97;
  /** RegularExpression Id. */
  int PONTOPONTOIGUAL = 98;
  /** RegularExpression Id. */
  int VIRGULA = 99;
  /** RegularExpression Id. */
  int PONTOVIRGULA = 100;
  /** RegularExpression Id. */
  int DOISPONTOS = 101;
  /** RegularExpression Id. */
  int DUPLODOISPONTOS = 102;
  /** RegularExpression Id. */
  int SETA = 103;
  /** RegularExpression Id. */
  int SETAGORDA = 104;
  /** RegularExpression Id. */
  int QUADRADO = 105;
  /** RegularExpression Id. */
  int CIFRAO = 106;
  /** RegularExpression Id. */
  int ASPASDUPLAS = 107;
  /** RegularExpression Id. */
  int ASPASSIMPLES = 108;
  /** RegularExpression Id. */
  int INTERROGACAO = 109;
  /** RegularExpression Id. */
  int NUM = 110;
  /** RegularExpression Id. */
  int FLOAT = 111;
  /** RegularExpression Id. */
  int CADEIA = 112;
  /** RegularExpression Id. */
  int CARACTERE = 113;
  /** RegularExpression Id. */
  int ID = 114;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"as\"",
    "\"break\"",
    "\"const\"",
    "\"continue\"",
    "\"crate\"",
    "\"else\"",
    "\"enum\"",
    "\"extern\"",
    "\"false\"",
    "\"fn\"",
    "\"for\"",
    "\"if\"",
    "\"impl\"",
    "\"in\"",
    "\"let\"",
    "\"loop\"",
    "\"match\"",
    "\"mod\"",
    "\"move\"",
    "\"mut\"",
    "\"pub\"",
    "\"ref\"",
    "\"return\"",
    "\"self\"",
    "\"Self\"",
    "\"static\"",
    "\"struct\"",
    "\"super\"",
    "\"trait\"",
    "\"true\"",
    "\"type\"",
    "\"unsafe\"",
    "\"use\"",
    "\"where\"",
    "\"while\"",
    "\"async\"",
    "\"await\"",
    "\"dyn\"",
    "\"abstract\"",
    "\"become\"",
    "\"box\"",
    "\"do\"",
    "\"final\"",
    "\"macro\"",
    "\"override\"",
    "\"priv\"",
    "\"typeof\"",
    "\"unsized\"",
    "\"virtual\"",
    "\"yield\"",
    "\"try\"",
    "\"bool\"",
    "\"union\"",
    "\"\\\'static\"",
    "<MACRO>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"//\"",
    "\"%\"",
    "\"^\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"&&\"",
    "\"||\"",
    "\"<<\"",
    "\">>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"^=\"",
    "\"&=\"",
    "\"|=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"@\"",
    "\"_\"",
    "\".\"",
    "\"..\"",
    "\"...\"",
    "\"..=\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"::\"",
    "\"->\"",
    "\"=>\"",
    "\"#\"",
    "\"$\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"?\"",
    "<NUM>",
    "<FLOAT>",
    "<CADEIA>",
    "<CARACTERE>",
    "<ID>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
  };

}
