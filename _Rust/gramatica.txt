
S' -> BLC_MAIN 

BLC_MAIN -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> i8
TIPO -> i16
TIPO -> i32
TIPO -> i64
TIPO -> i128
TIPO -> isize
TIPO -> u8
TIPO -> u16
TIPO -> u32
TIPO -> u64
TIPO -> u128
TIPO -> usize
TIPO -> f32
TIPO -> f64
TIPO -> ()
TIPO -> char
TIPO -> bool

CD -> INST
CD -> ''

INST -> INST_IF
INST -> INST_WL
INST -> INST_VAR
INST -> return EXP PV
INST -> EXP PV
INST -> CHAMA_FUNC
INST -> ACESSA_VET

ACESSA_VET -> ID [ NUM ] PV AV
AV -> ''
AV -> INST

PV -> ;
PV -> ''

CHAMA_FUNC -> ID ( EXP EP ) ; CF
CHAMA_FUNC -> EXP ID ( PAR ) ; CF
EP -> , EXP
EP -> ''
CF -> ''
CF -> INST

OP -> opc
OP -> opAum
OP -> opAdois
OP -> opL

INST_IF -> if EXP { CD } IN
INST_IF -> if ID ( EXP EP ) { CD } IN
IN -> else if ID ( EXP EP ) { CD } IN
IN -> else if EXP { CD } IN
IN -> else { CD } IN
IN -> ''
IN -> INST

INST_WL -> while ( EXP ) { CD } R
R -> ''
R -> INST

INST_VAR -> let ID ; IV
INST_VAR -> let ID = ID ; IV
INST_VAR -> let ID = NUM ; IV
INST_VAR -> let ID : = TIPO NUM ; IV
INST_VAR -> let ID : [ TIPO ; NUM ] = [ NUM , NUM ] ; IV
INST_VAR -> let ID : [ TIPO ; NUM ] = [ NUM MP ] ; IV
MP -> , NUM MP
MP -> ''
IV -> ''
IV -> INST

EXP -> EXP opC T
opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -

T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^

Y -> X
X -> X opL J
opL -> ||
opL -> &&

X -> J
J -> ! F
J -> F

F -> ID
F -> VAR
F -> NUM
F -> ( EXP )



------------------------------
















S' -> BLC_MAIN 

BLC_MAIN -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> i8
TIPO -> i16
TIPO -> i32
TIPO -> i64
TIPO -> i128
TIPO -> isize
TIPO -> u8
TIPO -> u16
TIPO -> u32
TIPO -> u64
TIPO -> u128
TIPO -> usize
TIPO -> f32
TIPO -> f64
TIPO -> ()
TIPO -> char
TIPO -> bool

CD -> INST
CD -> ''

INST -> INST_IF
INST -> INST_WL
INST -> INST_VAR
INST -> return EXP PV
INST -> EXP PV
INST -> CHAMA_FUNC
INST -> ACESSA_VET

ACESSA_VET -> ID [ NUM ] PV AV
AV -> ''
AV -> INST

PV -> ;
PV -> ''

CHAMA_FUNC -> ID ( EXP EP ) ; CF
CHAMA_FUNC -> EXP ID ( PAR ) ; CF
EP -> , EXP
EP -> ''
CF -> ''
CF -> INST

OP -> opc
OP -> opAum
OP -> opAdois
OP -> opL

INST_IF -> if EXP { CD } IN
INST_IF -> if ID ( EXP EP ) { CD } IN
IN -> else if ID ( EXP EP ) { CD } IN
IN -> else if EXP { CD } IN
IN -> else { CD } IN
IN -> ''
IN -> INST

INST_WL -> while ( EXP ) { CD } R
R -> ''
R -> INST

INST_VAR -> let ID ; IV
INST_VAR -> let ID = ID ; IV
INST_VAR -> let ID = NUM ; IV
INST_VAR -> let ID : = TIPO NUM ; IV
INST_VAR -> let ID : [ TIPO ; NUM ] = [ NUM , NUM ] ; IV
IV -> ''
IV -> INST

EXP -> EXP opC T
opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -

T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^

Y -> X
X -> X opL J
opL -> ||
opL -> &&

X -> J
J -> ! F
J -> F

F -> ID
F -> VAR
F -> NUM
F -> ( EXP )



----------------------------------
S' -> BLC_MAIN 

BLC_MAIN -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

CD -> INST
CD -> ''

INST -> INST_IF
INST -> INST_WL
INST -> INST_VAR
INST -> return EXP PV
INST -> EXP PV

PV -> ;
PV -> ''

INST_IF -> if EXP { CD } IN
INST_IF -> if ID ( PAR ) { CD } IN
IN -> else if ID ( PAR ) { CD } IN
IN -> else if EXP { CD } IN
IN -> else { CD } IN
IN -> ''
IN -> INST

INST_WL -> while ( EXP ) { CD } R
R -> ''
R -> INST

INST_VAR -> let ID ; IV
INST_VAR -> let ID = ID ; IV
INST_VAR -> let ID = NUM ; IV
INST_VAR -> let ID : = TIPO NUM ; IV
INST_VAR -> let ID : [ TIPO ; NUM ] = [ NUM , NUM ] ; IV
IV -> ''
IV -> INST

EXP -> EXP opC T
opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -

T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^

Y -> X
X -> X opL J
opL -> ||
opL -> &&

X -> J
J -> ! F
J -> F

F -> ID
F -> VAR
F -> NUM
F -> ( EXP )



--------------------------------------------
entrada
fn main ( ) { if ID ( ID : char ) { let ID = ID ; } let ID ; let ID = ID ; } fn ID ( ID : int ) { while ( ! ( ID + ID ) || ( ID == ID ) ) { } }




S' -> BLC_MAIN 

BLC_MAIN -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

CD -> INST
CD -> ''

INST -> INST_IF
INST -> INST_WL
INST -> INST_VAR

INST_IF -> if EXP { CD } IN
INST_IF -> if ID ( PAR ) { CD } IN
IN -> else if ID ( PAR ) { CD } IN
IN -> else if EXP { CD } IN
IN -> else { CD } IN
IN -> ''
IN -> INST

INST_WL -> while ( EXP ) { CD } R
R -> ''
R -> INST

INST_VAR -> let ID ; IV
INST_VAR -> let ID = ID ; IV
INST_VAR -> let ID = NUM ; IV
IV -> ''
IV -> INST

EXP -> EXP opC T
opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -

T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^

Y -> X
X -> X opL J
opL -> ||
opL -> &&

X -> J
J -> ! F
J -> F

F -> ID
F -> VAR
F -> NUM
F -> ( EXP )




---------------------------------------------------

S' -> BLC_MAIN 

BLC_MAIN -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

CD -> INST
CD -> ''

INST -> INST_IF
INST -> INST_WL

INST_IF -> if EXP { CD } IN
INST_IF -> if ID ( PAR ) { CD } IN
IN -> else if ID ( PAR ) { CD } IN
IN -> else if EXP { CD } IN
IN -> else { CD } IN
IN -> ''
IN -> INST

INST_WL -> while ( EXP ) { CD } R
R -> ''
R -> INST

EXP -> EXP opC T
opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -

T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^

Y -> X
X -> X opL J
opL -> ||
opL -> &&
opL -> =

X -> J
J -> ! F
J -> F

F -> ID
F -> VAR
F -> NUM
F -> ( EXP )




----------------------------------------------------------

S' -> BLC_MAIN 

BLC_MAIN -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

CD -> INST
CD -> ''

INST -> INST_IF
INST -> INST_WL

INST_IF -> if EXP { CD } IN
INST_IF -> if ID ( par ) { code } IN
IN -> else if ID ( par ) { code } IN
IN -> else if EXP { code } IN
IN -> else { code } IN
IN -> ''
IN -> INST

INST_WL -> while ( EXP ) { code } R
R -> ''
R -> INST



---------------------------------------

S' -> BLC

BLC -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC -> ''



CD -> INST
CD -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

INST -> if EXP { CD } IN
INST -> if ID ( PAR ) { CD } IN
IN -> else if ID ( PAR ) { CD } IN
IN -> else if EXP { CD } IN
IN -> else { CD } IN
IN -> ''

INST -> while ( EXP ) { CD }

INST -> EXP
EXP -> EXP opC T

opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -
T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^
Y -> X
X -> X opL F
opL -> ||
opL -> &&
opL -> !
opL -> =

X -> F
F -> ID
F -> NUM
F -> { EXP }
F -> ( EXP )


-----------------------


entrada
fn main ( ID : int ) { if ( ( ID >= ID ) + ( ID > ID ) ) { ID = ID } else if ID ( ID : int ) { } else { ID } } fn ID ( ID : bool , ID : char ) { ID % ID == NUM }

S' -> BLC

BLC -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC -> ''

CD -> INST
CD -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

INST -> if EXP { CD } IN
INST -> if ID ( PAR ) { CD } IN
IN -> else if ID ( PAR ) { CD } IN
IN -> else if EXP { CD } IN
IN -> else { CD } IN
IN -> ''

INST -> EXP
EXP -> EXP opC T

opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -
T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^
Y -> X
X -> X opL F
opL -> ||
opL -> &&
opL -> !
opL -> =

X -> F
F -> ID
F -> NUM
F -> { EXP }
F -> ( EXP )




--------------
entrada
fn main ( ID : int ) { if ( ( ID >= ID ) + ( ID > ID ) ) { ID = ID } else if ID ( ID : int ) { } else { } } fn ID ( ID : bool , ID : char ) { ID % ID == NUM }

S' -> BLC

BLC -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC -> ''

CD -> INST
CD -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

INST -> if EXP { CD } IN
INST -> if ID ( PAR ) { CD } IN
IN -> else if ID ( PAR ) { CD } IN
IN -> else if EXP { CD } IN
IN -> else { CD }
IN -> ''
INST -> EXP
EXP -> EXP opC T

opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -
T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^
Y -> X
X -> X opL F
opL -> ||
opL -> &&
opL -> !
opL -> =

X -> F
F -> ID
F -> NUM
F -> { EXP }
F -> ( EXP )


------------------------

entrada
fn main ( ID : int ) { if ( ( ID >= ID ) + ( ID > ID ) ) { ID = ID } } fn ID ( ID : bool , ID : char ) { ID % ID == NUM }

S' -> BLC

BLC -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC -> ''

CD -> INST
CD -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

INST -> if EXP { CD }
INST -> EXP
EXP -> EXP opC T

opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -
T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^
Y -> X
X -> X opL F
opL -> ||
opL -> &&
opL -> !
opL -> =

X -> F
F -> ID
F -> NUM
F -> { EXP }
F -> ( EXP )


-----------------

entrada
fn main ( ID : int ) { if ( ( ID >= ID ) + ( ID > ID ) ) { ID = ID ; } }


S' -> BLC

BLC -> fn main ( PAR ) { CD }
BLC -> fn ID ( PAR ) { CD }

CD -> INST
CD -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

INST -> if EXP { CD }
INST -> EXP
EXP -> EXP opC T

opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -
T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^
Y -> X
X -> X opL J
opL -> ||
opL -> &&
opL -> !
opL -> =

X -> J
J -> F
F -> ID FIM
F -> NUM FIM
F -> { EXP }
F -> ( EXP )
FIM -> ;
FIM -> ''



-----------------

entrada 
fn main ( ID : int ) { if ( ( ID >= ID ) + ( ID > ID ) ) { } }

S' -> BLC

BLC -> fn main ( PAR ) { CD }
BLC -> fn ID ( PAR ) { CD }

CD -> INST
CD -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

INST -> if ( EXP ) { CD }

EXP -> EXP opC T EX
EXP -> ''
EX -> ''
EX -> opL EXP

opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -
T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^
Y -> X
X -> X opL J
opL -> ||
opL -> &&
opL -> !
opL -> =

X -> J
J -> F
F -> ID
F -> NUM
F -> { EXP }
F -> ( EXP )



---------------------------------
S' -> BLC

BLC -> fn main ( PAR ) { CD }
BLC -> ID ( PAR ) { CD }

CD -> INST
CD -> ''

PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

INST -> E
E -> E opC T
opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==
E -> T
T -> T opAum Y
opAum -> +
opAum -> -
T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^
Y -> X
X -> X opL J
opL -> ||
opL -> &&
opL -> !
opL -> =
X -> J
J -> F
F -> ID
F -> NUM
F -> { E }
F -> ( E )
-------------------------

entrada 
fn main ( ID : int , ID : bool ) { ID + ID }


S' -> BLC

BLC -> fn main ( PAR ) { CD }
BLC -> ID ( PAR ) { CD }

CD -> INST
CD -> ''

PAR -> ID : TYPE PR
PAR -> ''
PR -> ''
PR -> , PAR

TYPE -> int
TYPE -> char
TYPE -> bool

INST -> 

-------------------------
S -> E $
E -> E opC T
opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==
E -> T
T -> T opAum Y
opAum -> +
opAum -> -
T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^
Y -> X
X -> X opL J
opL -> ||
opL -> &&
opL -> !
opL -> =
X -> J
J -> F
F -> ID
F -> NUM
F -> { E }
F -> ( E )




old

S' -> E
E -> E opA T
opA -> <
opA -> <=
opA -> >
opA -> >=
opA -> <>
opA -> >
opA -> !=
opA -> ==
E -> T
T -> T opB Y
opB -> +
opB -> -
opB -> ||
T -> Y
Y -> Y opC F
opC -> *
opC -> /
opC -> %
opC -> ^
opA -> &&
Y -> F
F -> ID
F -> ! F
F -> ( E )





old

S -> ID
ID -> ID + T
ID -> ID - T
ID -> T
T -> T * F
T -> T / F
T -> F
F -> ( ID )
F -> $
