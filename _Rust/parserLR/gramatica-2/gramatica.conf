S' -> BLC_MAIN 

BLC_MAIN -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC ->

PAR -> ID : TIPO PR
PAR ->
PR ->
PR -> , PAR

TIPO -> int
TIPO -> char
TIPO -> bool

CD -> INST
CD ->

INST -> INST_IF
INST -> INST_WL
INST -> INST_VAR

INST_IF -> if EXP { CD } IN
INST_IF -> if ID ( PAR ) { CD } IN
IN -> else if ID ( PAR ) { CD } IN
IN -> else if EXP { CD } IN
IN -> else { CD } IN
IN ->
IN -> INST

INST_WL -> while ( EXP ) { CD } R
R ->
R -> INST

INST_VAR -> let ID ; IV
INST_VAR -> let ID = ID ; IV
INST_VAR -> let ID = NUM ; IV
IV ->
IV -> INST

EXP -> EXP opC T
opC -> <
opC -> <=
opC -> >
opC -> >=
opC -> <>
opC -> >
opC -> !=
opC -> ==

EXP -> T
T -> T opAum Y
opAum -> +
opAum -> -

T -> Y
Y -> Y opAdois X
opAdois -> *
opAdois -> /
opAdois -> %
opAdois -> ^

Y -> X
X -> X opL J
opL -> ||
opL -> &&

X -> J
J -> ! F
J -> F

F -> ID
F -> VAR
F -> NUM
F -> ( EXP )
