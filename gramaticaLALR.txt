S -> BLC_MAIN
BLC_MAIN -> fn main ( PAR ) { CD } BLC
BLC -> fn ID ( PAR ) { CD } BLC
BLC -> ''
PAR -> ID : TIPO PR
PAR -> ''
PR -> ''
PR -> , PAR
TIPO -> i8
TIPO -> i16
TIPO -> i32
TIPO -> i64
TIPO -> i128
TIPO -> isize
TIPO -> u8
TIPO -> u16
TIPO -> u32
TIPO -> u64
TIPO -> u128
TIPO -> usize
TIPO -> f32
TIPO -> f64
TIPO -> ()
TIPO -> char
TIPO -> str
TIPO -> bool
TIPO -> never
CD -> INST
CD -> ''
INST -> INST_IF
INST -> INST_WL
INST -> INST_VAR
INST -> return EXP PV
INST -> EXP PV
INST -> CHAMA_FUNC
INST -> ACESSA_VET
ACESSA_VET -> ID [ NUM ] PV AV
AV -> ''
AV -> INST
PV -> ;
PV -> ''
CHAMA_FUNC -> ID ( EXP EP ) ; CF
CHAMA_FUNC -> EXP ID ( PAR ) ; CF
EP -> , EXP
EP -> ''
CF -> ''
CF -> INST
INST_IF -> if EXP { CD } IN
INST_IF -> if ID ( EXP EP ) { CD } IN
IN -> else if ID ( EXP EP ) { CD } IN
IN -> else if EXP { CD } IN
IN -> else { CD } IN
IN -> ''
IN -> INST
INST_WL -> while ( EXP ) { CD } R
R -> ''
R -> INST
INST_VAR -> let ID ; IV
INST_VAR -> let ID = EXP ; IV
INST_VAR -> let ID : = TIPO NUM ; IV
INST_VAR -> let ID : [ TIPO ; NUM ] = [ NUM , NUM ] ; IV
INST_VAR -> let ID : [ TIPO ; ID ] = [ VALOR ] ; IV
VALOR -> NUM MV
MV -> , VALOR
MV -> ''
IV -> ''
IV -> INST
EXP -> EXP OP1 E0
OP1 -> =
OP1 -> +=
OP1 -> -+
OP1 -> *=
OP1 -> /=
OP1 -> %=
OP1 -> &=
OP1 -> |=
OP1 -> ^=
OP1 -> <<=
OP1 -> >>=
EXP -> E0
E0 -> E0 OP2 E1
OP2 -> ..=
OP2 -> ..
E0 -> E1
E1 -> E1 OP3 E2
OP3 -> ||
E1 -> E2
E2 -> E2 OP4 E3
OP4 -> &&
E2 -> E3
E3 -> E3 OP5 E4
OP5 -> <
OP5 -> <=
OP5 -> >
OP5 -> >=
OP5 -> !=
OP5 -> ==
E3 -> E4
E4 -> E4 OP6 E5
OP6 -> |
E4 -> E5
E5 -> E5 OP7 E6
OP7 -> ^
E5 -> E6
E6 -> E6 OP8 E7
OP8 -> &
E6 -> E7
E7 -> E7 OP9 E8
OP9 -> <<
OP9 -> >>
E7 -> E8
E8 -> E8 OP10 E9
OP10 -> +
OP10 -> -
E8 -> E9
E9 -> E9 OP11 E10
OP11 -> *
OP11 -> /
OP11 -> %
E9 -> E10
E10 -> E10 OP12 E11
OP12 -> as
E10 -> E11
E11 -> E12
E12 -> ! F
E12 -> F
F -> ID
F -> NUM
F -> ( EXP )